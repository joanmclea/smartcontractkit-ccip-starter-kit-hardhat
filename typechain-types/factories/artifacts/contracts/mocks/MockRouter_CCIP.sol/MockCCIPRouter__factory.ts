/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  MockCCIPRouter,
  MockCCIPRouterInterface,
} from "../../../../../artifacts/contracts/mocks/MockRouter_CCIP.sol/MockCCIPRouter";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFeeTokenAmount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedAddress",
        type: "bytes",
      },
    ],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidExtraArgsTag",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyOffRamp",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "UnsupportedDestinationChain",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "sourceChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "offRamp",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "calldataHash",
        type: "bytes32",
      },
    ],
    name: "MessageExecuted",
    type: "event",
  },
  {
    inputs: [],
    name: "DEFAULT_GAS_LIMIT",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GAS_FOR_CALL_EXACT_CHECK",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipSend",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "isChainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "supported",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
      {
        internalType: "uint16",
        name: "gasForCallExactCheck",
        type: "uint16",
      },
      {
        internalType: "uint256",
        name: "gasLimit",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "routeMessage",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "retData",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "gasUsed",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506121e7806100206000396000f3fe6080604052600436106100705760003560e01c8063a48a90581161004e578063a48a905814610121578063d6be695a1461015e578063ee18e0d314610189578063fbca3b74146101b457610070565b806320487ded146100755780633cf97983146100b257806396f4e9f9146100f1575b600080fd5b34801561008157600080fd5b5061009c6004803603810190610097919061104d565b6101f1565b6040516100a991906110b8565b60405180910390f35b3480156100be57600080fd5b506100d960048036038101906100d49190611131565b6101f9565b6040516100e89392919061124e565b60405180910390f35b61010b600480360381019061010691906112ab565b610224565b6040516101189190611320565b60405180910390f35b34801561012d57600080fd5b506101486004803603810190610143919061133b565b61055a565b6040516101559190611368565b60405180910390f35b34801561016a57600080fd5b50610173610565565b6040516101809190611392565b60405180910390f35b34801561019557600080fd5b5061019e61056c565b6040516101ab91906113bc565b60405180910390f35b3480156101c057600080fd5b506101db60048036038101906101d6919061133b565b610572565b6040516101e89190611495565b60405180910390f35b600092915050565b6000606060006102148761020c906115c3565b8787876105c5565b9250925092509450945094915050565b6000602082806000019061023891906115e5565b90501461028c5781806000019061024f91906115e5565b6040517f370d875f000000000000000000000000000000000000000000000000000000008152600401610283929190611675565b60405180910390fd5b600082806000019061029e91906115e5565b8101906102ab9190611699565b905073ffffffffffffffffffffffffffffffffffffffff80168111806102d15750600a81105b15610323578280600001906102e691906115e5565b6040517f370d875f00000000000000000000000000000000000000000000000000000000815260040161031a929190611675565b60405180910390fd5b6000819050600061034285806080019061033d91906115e5565b6106b5565b60000151905060008560405160200161035b91906119b8565b60405160208183030381529060405280519060200120905060006040518060a00160405280838152602001600067ffffffffffffffff168152602001336040516020016103a891906119e9565b60405160208183030381529060405281526020018880602001906103cc91906115e5565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018880604001906104249190611a04565b808060200260200160405190810160405280939291908181526020016000905b82821015610474578484839050604002018036038101906104659190611a67565b81526020019060010190610444565b5050505050815250905060005b8780604001906104919190611a04565b905081101561053a5761052933868a80604001906104af9190611a04565b858181106104c0576104bf611a94565b5b905060400201602001358b80604001906104da9190611a04565b868181106104eb576104ea611a94565b5b90506040020160000160208101906105039190611ac3565b73ffffffffffffffffffffffffffffffffffffffff1661079e909392919063ffffffff16565b8061053390611b1f565b9050610481565b506105498161138885876105c5565b505050819550505050505092915050565b600060019050919050565b62030d4081565b61138881565b6060600067ffffffffffffffff81111561058f5761058e610c6b565b5b6040519080825280602002602001820160405280156105bd5781602001602082028036833780820191505090505b509050919050565b600060606000806385572ffb60e01b886040516024016105e59190611d0f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506106528186888a6084610827565b8094508195508296505050507f9b877de93ea9895756e337442c657f95a34fc68e7eb988bdfa693d5be83016b6886000015189602001513384805190602001206040516106a29493929190611d31565b60405180910390a1509450945094915050565b6106bd610bee565b600083839050036106eb57604051806020016040528062030d4067ffffffffffffffff168152509050610798565b6397a657c960e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191683839061071f9190611dba565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610775576040517f5247fdce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8282600490809261078893929190611e23565b8101906107959190611e9a565b90505b92915050565b610821846323b872dd60e01b8585856040516024016107bf93929190611ec7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061095a565b50505050565b6000606060008361ffff1667ffffffffffffffff81111561084b5761084a610c6b565b5b6040519080825280601f01601f19166020018201604052801561087d5781602001600182028036833780820191505090505b509150863b6108b0577f0c3b563c0000000000000000000000000000000000000000000000000000000060005260046000fd5b5a858110156108e3577fafa32a2c0000000000000000000000000000000000000000000000000000000060005260046000fd5b8581039050866040820482031161091e577f37c3be290000000000000000000000000000000000000000000000000000000060005260046000fd5b5a6000808b5160208d0160008d8df194505a810392503d86811115610941578690505b808552806000602087013e505050955095509592505050565b60006109bc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a219092919063ffffffff16565b9050600081511115610a1c57808060200190518101906109dc9190611f2a565b610a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1290611fda565b60405180910390fd5b5b505050565b6060610a308484600085610a39565b90509392505050565b606082471015610a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a759061206c565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610aa791906120c8565b60006040518083038185875af1925050503d8060008114610ae4576040519150601f19603f3d011682016040523d82523d6000602084013e610ae9565b606091505b5091509150610afa87838387610b06565b92505050949350505050565b60608315610b68576000835103610b6057610b2085610b7b565b610b5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b569061212b565b60405180910390fd5b5b829050610b73565b610b728383610b9e565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610bb15781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be5919061218f565b60405180910390fd5b6040518060200160405280600081525090565b6000604051905090565b600080fd5b600080fd5b600067ffffffffffffffff82169050919050565b610c3281610c15565b8114610c3d57600080fd5b50565b600081359050610c4f81610c29565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ca382610c5a565b810181811067ffffffffffffffff82111715610cc257610cc1610c6b565b5b80604052505050565b6000610cd5610c01565b9050610ce18282610c9a565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115610d1057610d0f610c6b565b5b610d1982610c5a565b9050602081019050919050565b82818337600083830152505050565b6000610d48610d4384610cf5565b610ccb565b905082815260208101848484011115610d6457610d63610cf0565b5b610d6f848285610d26565b509392505050565b600082601f830112610d8c57610d8b610ceb565b5b8135610d9c848260208601610d35565b91505092915050565b600067ffffffffffffffff821115610dc057610dbf610c6b565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e0182610dd6565b9050919050565b610e1181610df6565b8114610e1c57600080fd5b50565b600081359050610e2e81610e08565b92915050565b6000819050919050565b610e4781610e34565b8114610e5257600080fd5b50565b600081359050610e6481610e3e565b92915050565b600060408284031215610e8057610e7f610c55565b5b610e8a6040610ccb565b90506000610e9a84828501610e1f565b6000830152506020610eae84828501610e55565b60208301525092915050565b6000610ecd610ec884610da5565b610ccb565b90508083825260208201905060408402830185811115610ef057610eef610dd1565b5b835b81811015610f195780610f058882610e6a565b845260208401935050604081019050610ef2565b5050509392505050565b600082601f830112610f3857610f37610ceb565b5b8135610f48848260208601610eba565b91505092915050565b600060a08284031215610f6757610f66610c55565b5b610f7160a0610ccb565b9050600082013567ffffffffffffffff811115610f9157610f90610ce6565b5b610f9d84828501610d77565b600083015250602082013567ffffffffffffffff811115610fc157610fc0610ce6565b5b610fcd84828501610d77565b602083015250604082013567ffffffffffffffff811115610ff157610ff0610ce6565b5b610ffd84828501610f23565b604083015250606061101184828501610e1f565b606083015250608082013567ffffffffffffffff81111561103557611034610ce6565b5b61104184828501610d77565b60808301525092915050565b6000806040838503121561106457611063610c0b565b5b600061107285828601610c40565b925050602083013567ffffffffffffffff81111561109357611092610c10565b5b61109f85828601610f51565b9150509250929050565b6110b281610e34565b82525050565b60006020820190506110cd60008301846110a9565b92915050565b600080fd5b600060a082840312156110ee576110ed6110d3565b5b81905092915050565b600061ffff82169050919050565b61110e816110f7565b811461111957600080fd5b50565b60008135905061112b81611105565b92915050565b6000806000806080858703121561114b5761114a610c0b565b5b600085013567ffffffffffffffff81111561116957611168610c10565b5b611175878288016110d8565b94505060206111868782880161111c565b935050604061119787828801610e55565b92505060606111a887828801610e1f565b91505092959194509250565b60008115159050919050565b6111c9816111b4565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156112095780820151818401526020810190506111ee565b60008484015250505050565b6000611220826111cf565b61122a81856111da565b935061123a8185602086016111eb565b61124381610c5a565b840191505092915050565b600060608201905061126360008301866111c0565b81810360208301526112758185611215565b905061128460408301846110a9565b949350505050565b600060a082840312156112a2576112a16110d3565b5b81905092915050565b600080604083850312156112c2576112c1610c0b565b5b60006112d085828601610c40565b925050602083013567ffffffffffffffff8111156112f1576112f0610c10565b5b6112fd8582860161128c565b9150509250929050565b6000819050919050565b61131a81611307565b82525050565b60006020820190506113356000830184611311565b92915050565b60006020828403121561135157611350610c0b565b5b600061135f84828501610c40565b91505092915050565b600060208201905061137d60008301846111c0565b92915050565b61138c81610c15565b82525050565b60006020820190506113a76000830184611383565b92915050565b6113b6816110f7565b82525050565b60006020820190506113d160008301846113ad565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61140c81610df6565b82525050565b600061141e8383611403565b60208301905092915050565b6000602082019050919050565b6000611442826113d7565b61144c81856113e2565b9350611457836113f3565b8060005b8381101561148857815161146f8882611412565b975061147a8361142a565b92505060018101905061145b565b5085935050505092915050565b600060208201905081810360008301526114af8184611437565b905092915050565b6114c081611307565b81146114cb57600080fd5b50565b6000813590506114dd816114b7565b92915050565b600060a082840312156114f9576114f8610c55565b5b61150360a0610ccb565b90506000611513848285016114ce565b600083015250602061152784828501610c40565b602083015250604082013567ffffffffffffffff81111561154b5761154a610ce6565b5b61155784828501610d77565b604083015250606082013567ffffffffffffffff81111561157b5761157a610ce6565b5b61158784828501610d77565b606083015250608082013567ffffffffffffffff8111156115ab576115aa610ce6565b5b6115b784828501610f23565b60808301525092915050565b60006115cf36836114e3565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611602576116016115d6565b5b80840192508235915067ffffffffffffffff821115611624576116236115db565b5b6020830192506001820236038313156116405761163f6115e0565b5b509250929050565b600061165483856111da565b9350611661838584610d26565b61166a83610c5a565b840190509392505050565b60006020820190508181036000830152611690818486611648565b90509392505050565b6000602082840312156116af576116ae610c0b565b5b60006116bd84828501610e55565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126116f2576116f16116d0565b5b83810192508235915060208301925067ffffffffffffffff82111561171a576117196116c6565b5b6001820236038313156117305761172f6116cb565b5b509250929050565b600082825260208201905092915050565b60006117558385611738565b9350611762838584610d26565b61176b83610c5a565b840190509392505050565b60008083356001602003843603038112611793576117926116d0565b5b83810192508235915060208301925067ffffffffffffffff8211156117bb576117ba6116c6565b5b6040820236038313156117d1576117d06116cb565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b60006118036020840184610e1f565b905092915050565b600061181a6020840184610e55565b905092915050565b61182b81610e34565b82525050565b6040820161184260008301836117f4565b61184f6000850182611403565b5061185d602083018361180b565b61186a6020850182611822565b50505050565b600061187c8383611831565b60408301905092915050565b600082905092915050565b6000604082019050919050565b60006118ac83856117d9565b93506118b7826117ea565b8060005b858110156118f0576118cd8284611888565b6118d78882611870565b97506118e283611893565b9250506001810190506118bb565b5085925050509392505050565b600060a0830161191060008401846116d5565b8583036000870152611923838284611749565b9250505061193460208401846116d5565b8583036020870152611947838284611749565b925050506119586040840184611776565b858303604087015261196b8382846118a0565b9250505061197c60608401846117f4565b6119896060860182611403565b5061199760808401846116d5565b85830360808701526119aa838284611749565b925050508091505092915050565b600060208201905081810360008301526119d281846118fd565b905092915050565b6119e381610df6565b82525050565b60006020820190506119fe60008301846119da565b92915050565b60008083356001602003843603038112611a2157611a206115d6565b5b80840192508235915067ffffffffffffffff821115611a4357611a426115db565b5b602083019250604082023603831315611a5f57611a5e6115e0565b5b509250929050565b600060408284031215611a7d57611a7c610c0b565b5b6000611a8b84828501610e6a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611ad957611ad8610c0b565b5b6000611ae784828501610e1f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b2a82610e34565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b5c57611b5b611af0565b5b600182019050919050565b611b7081611307565b82525050565b611b7f81610c15565b82525050565b6000611b90826111cf565b611b9a8185611738565b9350611baa8185602086016111eb565b611bb381610c5a565b840191505092915050565b600081519050919050565b6000819050602082019050919050565b604082016000820151611bef6000850182611403565b506020820151611c026020850182611822565b50505050565b6000611c148383611bd9565b60408301905092915050565b6000602082019050919050565b6000611c3882611bbe565b611c4281856117d9565b9350611c4d83611bc9565b8060005b83811015611c7e578151611c658882611c08565b9750611c7083611c20565b925050600181019050611c51565b5085935050505092915050565b600060a083016000830151611ca36000860182611b67565b506020830151611cb66020860182611b76565b5060408301518482036040860152611cce8282611b85565b91505060608301518482036060860152611ce88282611b85565b91505060808301518482036080860152611d028282611c2d565b9150508091505092915050565b60006020820190508181036000830152611d298184611c8b565b905092915050565b6000608082019050611d466000830187611311565b611d536020830186611383565b611d6060408301856119da565b611d6d6060830184611311565b95945050505050565b600082905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600082821b905092915050565b6000611dc68383611d76565b82611dd18135611d81565b92506004821015611e1157611e0c7fffffffff0000000000000000000000000000000000000000000000000000000083600403600802611dad565b831692505b505092915050565b600080fd5b600080fd5b60008085851115611e3757611e36611e19565b5b83861115611e4857611e47611e1e565b5b6001850283019150848603905094509492505050565b600060208284031215611e7457611e73610c55565b5b611e7e6020610ccb565b90506000611e8e84828501610e55565b60008301525092915050565b600060208284031215611eb057611eaf610c0b565b5b6000611ebe84828501611e5e565b91505092915050565b6000606082019050611edc60008301866119da565b611ee960208301856119da565b611ef660408301846110a9565b949350505050565b611f07816111b4565b8114611f1257600080fd5b50565b600081519050611f2481611efe565b92915050565b600060208284031215611f4057611f3f610c0b565b5b6000611f4e84828501611f15565b91505092915050565b600082825260208201905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611fc4602a83611f57565b9150611fcf82611f68565b604082019050919050565b60006020820190508181036000830152611ff381611fb7565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612056602683611f57565b915061206182611ffa565b604082019050919050565b6000602082019050818103600083015261208581612049565b9050919050565b600081905092915050565b60006120a2826111cf565b6120ac818561208c565b93506120bc8185602086016111eb565b80840191505092915050565b60006120d48284612097565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612115601d83611f57565b9150612120826120df565b602082019050919050565b6000602082019050818103600083015261214481612108565b9050919050565b600081519050919050565b60006121618261214b565b61216b8185611f57565b935061217b8185602086016111eb565b61218481610c5a565b840191505092915050565b600060208201905081810360008301526121a98184612156565b90509291505056fea2646970667358221220cafd4a258b238ed55faeebfdb5de87b63b6b064477ceaf739472c1d739cd272964736f6c63430008130033";

type MockCCIPRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockCCIPRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCCIPRouter__factory extends ContractFactory {
  constructor(...args: MockCCIPRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockCCIPRouter> {
    return super.deploy(overrides || {}) as Promise<MockCCIPRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockCCIPRouter {
    return super.attach(address) as MockCCIPRouter;
  }
  override connect(signer: Signer): MockCCIPRouter__factory {
    return super.connect(signer) as MockCCIPRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCCIPRouterInterface {
    return new utils.Interface(_abi) as MockCCIPRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockCCIPRouter {
    return new Contract(address, _abi, signerOrProvider) as MockCCIPRouter;
  }
}
