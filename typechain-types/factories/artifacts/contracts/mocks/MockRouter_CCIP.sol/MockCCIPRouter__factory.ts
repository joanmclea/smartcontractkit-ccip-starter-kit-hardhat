/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  MockCCIPRouter,
  MockCCIPRouterInterface,
} from "../../../../../artifacts/contracts/mocks/MockRouter_CCIP.sol/MockCCIPRouter";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFeeTokenAmount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedAddress",
        type: "bytes",
      },
    ],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidExtraArgsTag",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyOffRamp",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "UnsupportedDestinationChain",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "sourceChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "offRamp",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "calldataHash",
        type: "bytes32",
      },
    ],
    name: "MessageExecuted",
    type: "event",
  },
  {
    inputs: [],
    name: "DEFAULT_GAS_LIMIT",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GAS_FOR_CALL_EXACT_CHECK",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipSend",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "getOnRamp",
    outputs: [
      {
        internalType: "address",
        name: "onRampAddress",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "isChainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "supported",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isOffRamp",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
      {
        internalType: "uint16",
        name: "gasForCallExactCheck",
        type: "uint16",
      },
      {
        internalType: "uint256",
        name: "gasLimit",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "routeMessage",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "retData",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "gasUsed",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50612531806100206000396000f3fe6080604052600436106100865760003560e01c8063a48a905811610059578063a48a905814610174578063a8d87a3b146101b1578063d6be695a146101ee578063ee18e0d314610219578063fbca3b741461024457610086565b806320487ded1461008b5780633cf97983146100c857806383826b2b1461010757806396f4e9f914610144575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad919061132d565b610281565b6040516100bf9190611398565b60405180910390f35b3480156100d457600080fd5b506100ef60048036038101906100ea9190611411565b610289565b6040516100fe9392919061152e565b60405180910390f35b34801561011357600080fd5b5061012e6004803603810190610129919061156c565b610345565b60405161013b91906115ac565b60405180910390f35b61015e600480360381019061015991906115e6565b610351565b60405161016b919061165b565b60405180910390f35b34801561018057600080fd5b5061019b60048036038101906101969190611676565b6106fb565b6040516101a891906115ac565b60405180910390f35b3480156101bd57600080fd5b506101d860048036038101906101d39190611676565b610706565b6040516101e591906116b2565b60405180910390f35b3480156101fa57600080fd5b50610203610714565b60405161021091906116dc565b60405180910390f35b34801561022557600080fd5b5061022e61071b565b60405161023b9190611706565b60405180910390f35b34801561025057600080fd5b5061026b60048036038101906102669190611676565b610721565b60405161027891906117df565b60405180910390f35b600092915050565b600060606000808473ffffffffffffffffffffffffffffffffffffffff163b14806102fa57506102f87f85572ffb000000000000000000000000000000000000000000000000000000008573ffffffffffffffffffffffffffffffffffffffff1661077490919063ffffffff16565b155b1561031f5760016000604051806020016040528060008152509092509250925061033b565b6103348761032c9061190d565b878787610799565b9250925092505b9450945094915050565b60006001905092915050565b60006020828060000190610365919061192f565b9050146103b95781806000019061037c919061192f565b6040517f370d875f0000000000000000000000000000000000000000000000000000000081526004016103b09291906119bf565b60405180910390fd5b60008280600001906103cb919061192f565b8101906103d891906119e3565b905073ffffffffffffffffffffffffffffffffffffffff80168111806103fe5750600a81105b1561045057828060000190610413919061192f565b6040517f370d875f0000000000000000000000000000000000000000000000000000000081526004016104479291906119bf565b60405180910390fd5b6000819050600061046f85806080019061046a919061192f565b610889565b6000015190506000856040516020016104889190611d02565b60405160208183030381529060405280519060200120905060006040518060a0016040528083815260200167de41ba4fc9d91ad967ffffffffffffffff168152602001336040516020016104dc91906116b2565b6040516020818303038152906040528152602001888060200190610500919061192f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018880604001906105589190611d24565b808060200260200160405190810160405280939291908181526020016000905b828210156105a8578484839050604002018036038101906105999190611d87565b81526020019060010190610578565b5050505050815250905060005b8780604001906105c59190611d24565b90508110156106db57600073ffffffffffffffffffffffffffffffffffffffff168880604001906105f69190611d24565b8381811061060757610606611db4565b5b905060400201600001602081019061061f9190611de3565b73ffffffffffffffffffffffffffffffffffffffff16146106ca576106c933868a806040019061064f9190611d24565b858181106106605761065f611db4565b5b905060400201602001358b806040019061067a9190611d24565b8681811061068b5761068a611db4565b5b90506040020160000160208101906106a39190611de3565b73ffffffffffffffffffffffffffffffffffffffff16610972909392919063ffffffff16565b5b806106d490611e3f565b90506105b5565b506106ea816113888587610799565b505050819550505050505092915050565b600060019050919050565b600063499602d29050919050565b62030d4081565b61138881565b6060600067ffffffffffffffff81111561073e5761073d610f4b565b5b60405190808252806020026020018201604052801561076c5781602001602082028036833780820191505090505b509050919050565b600061077f836109fb565b801561079157506107908383610a48565b5b905092915050565b600060606000806385572ffb60e01b886040516024016107b9919061202f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506108268186888a6084610b07565b8094508195508296505050507f9b877de93ea9895756e337442c657f95a34fc68e7eb988bdfa693d5be83016b6886000015189602001513384805190602001206040516108769493929190612051565b60405180910390a1509450945094915050565b610891610ece565b600083839050036108bf57604051806020016040528062030d4067ffffffffffffffff16815250905061096c565b6397a657c960e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168383906108f391906120da565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610949576040517f5247fdce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8282600490809261095c93929190612143565b81019061096991906121ba565b90505b92915050565b6109f5846323b872dd60e01b858585604051602401610993939291906121e7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c3a565b50505050565b6000610a27827f01ffc9a700000000000000000000000000000000000000000000000000000000610a48565b8015610a415750610a3f8263ffffffff60e01b610a48565b155b9050919050565b6000806301ffc9a760e01b83604051602401610a64919061222d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806000602060008551602087018a617530fa92503d91506000519050828015610aef575060208210155b8015610afb5750600081115b94505050505092915050565b6000606060008361ffff1667ffffffffffffffff811115610b2b57610b2a610f4b565b5b6040519080825280601f01601f191660200182016040528015610b5d5781602001600182028036833780820191505090505b509150863b610b90577f0c3b563c0000000000000000000000000000000000000000000000000000000060005260046000fd5b5a85811015610bc3577fafa32a2c0000000000000000000000000000000000000000000000000000000060005260046000fd5b85810390508660408204820311610bfe577f37c3be290000000000000000000000000000000000000000000000000000000060005260046000fd5b5a6000808b5160208d0160008d8df194505a810392503d86811115610c21578690505b808552806000602087013e505050955095509592505050565b6000610c9c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610d019092919063ffffffff16565b9050600081511115610cfc5780806020019051810190610cbc9190612274565b610cfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf290612324565b60405180910390fd5b5b505050565b6060610d108484600085610d19565b90509392505050565b606082471015610d5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d55906123b6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610d879190612412565b60006040518083038185875af1925050503d8060008114610dc4576040519150601f19603f3d011682016040523d82523d6000602084013e610dc9565b606091505b5091509150610dda87838387610de6565b92505050949350505050565b60608315610e48576000835103610e4057610e0085610e5b565b610e3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3690612475565b60405180910390fd5b5b829050610e53565b610e528383610e7e565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610e915781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec591906124d9565b60405180910390fd5b6040518060200160405280600081525090565b6000604051905090565b600080fd5b600080fd5b600067ffffffffffffffff82169050919050565b610f1281610ef5565b8114610f1d57600080fd5b50565b600081359050610f2f81610f09565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f8382610f3a565b810181811067ffffffffffffffff82111715610fa257610fa1610f4b565b5b80604052505050565b6000610fb5610ee1565b9050610fc18282610f7a565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115610ff057610fef610f4b565b5b610ff982610f3a565b9050602081019050919050565b82818337600083830152505050565b600061102861102384610fd5565b610fab565b90508281526020810184848401111561104457611043610fd0565b5b61104f848285611006565b509392505050565b600082601f83011261106c5761106b610fcb565b5b813561107c848260208601611015565b91505092915050565b600067ffffffffffffffff8211156110a05761109f610f4b565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110e1826110b6565b9050919050565b6110f1816110d6565b81146110fc57600080fd5b50565b60008135905061110e816110e8565b92915050565b6000819050919050565b61112781611114565b811461113257600080fd5b50565b6000813590506111448161111e565b92915050565b6000604082840312156111605761115f610f35565b5b61116a6040610fab565b9050600061117a848285016110ff565b600083015250602061118e84828501611135565b60208301525092915050565b60006111ad6111a884611085565b610fab565b905080838252602082019050604084028301858111156111d0576111cf6110b1565b5b835b818110156111f957806111e5888261114a565b8452602084019350506040810190506111d2565b5050509392505050565b600082601f83011261121857611217610fcb565b5b813561122884826020860161119a565b91505092915050565b600060a0828403121561124757611246610f35565b5b61125160a0610fab565b9050600082013567ffffffffffffffff81111561127157611270610fc6565b5b61127d84828501611057565b600083015250602082013567ffffffffffffffff8111156112a1576112a0610fc6565b5b6112ad84828501611057565b602083015250604082013567ffffffffffffffff8111156112d1576112d0610fc6565b5b6112dd84828501611203565b60408301525060606112f1848285016110ff565b606083015250608082013567ffffffffffffffff81111561131557611314610fc6565b5b61132184828501611057565b60808301525092915050565b6000806040838503121561134457611343610eeb565b5b600061135285828601610f20565b925050602083013567ffffffffffffffff81111561137357611372610ef0565b5b61137f85828601611231565b9150509250929050565b61139281611114565b82525050565b60006020820190506113ad6000830184611389565b92915050565b600080fd5b600060a082840312156113ce576113cd6113b3565b5b81905092915050565b600061ffff82169050919050565b6113ee816113d7565b81146113f957600080fd5b50565b60008135905061140b816113e5565b92915050565b6000806000806080858703121561142b5761142a610eeb565b5b600085013567ffffffffffffffff81111561144957611448610ef0565b5b611455878288016113b8565b9450506020611466878288016113fc565b935050604061147787828801611135565b9250506060611488878288016110ff565b91505092959194509250565b60008115159050919050565b6114a981611494565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114e95780820151818401526020810190506114ce565b60008484015250505050565b6000611500826114af565b61150a81856114ba565b935061151a8185602086016114cb565b61152381610f3a565b840191505092915050565b600060608201905061154360008301866114a0565b818103602083015261155581856114f5565b90506115646040830184611389565b949350505050565b6000806040838503121561158357611582610eeb565b5b600061159185828601610f20565b92505060206115a2858286016110ff565b9150509250929050565b60006020820190506115c160008301846114a0565b92915050565b600060a082840312156115dd576115dc6113b3565b5b81905092915050565b600080604083850312156115fd576115fc610eeb565b5b600061160b85828601610f20565b925050602083013567ffffffffffffffff81111561162c5761162b610ef0565b5b611638858286016115c7565b9150509250929050565b6000819050919050565b61165581611642565b82525050565b6000602082019050611670600083018461164c565b92915050565b60006020828403121561168c5761168b610eeb565b5b600061169a84828501610f20565b91505092915050565b6116ac816110d6565b82525050565b60006020820190506116c760008301846116a3565b92915050565b6116d681610ef5565b82525050565b60006020820190506116f160008301846116cd565b92915050565b611700816113d7565b82525050565b600060208201905061171b60008301846116f7565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611756816110d6565b82525050565b6000611768838361174d565b60208301905092915050565b6000602082019050919050565b600061178c82611721565b611796818561172c565b93506117a18361173d565b8060005b838110156117d25781516117b9888261175c565b97506117c483611774565b9250506001810190506117a5565b5085935050505092915050565b600060208201905081810360008301526117f98184611781565b905092915050565b61180a81611642565b811461181557600080fd5b50565b60008135905061182781611801565b92915050565b600060a0828403121561184357611842610f35565b5b61184d60a0610fab565b9050600061185d84828501611818565b600083015250602061187184828501610f20565b602083015250604082013567ffffffffffffffff81111561189557611894610fc6565b5b6118a184828501611057565b604083015250606082013567ffffffffffffffff8111156118c5576118c4610fc6565b5b6118d184828501611057565b606083015250608082013567ffffffffffffffff8111156118f5576118f4610fc6565b5b61190184828501611203565b60808301525092915050565b6000611919368361182d565b9050919050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261194c5761194b611920565b5b80840192508235915067ffffffffffffffff82111561196e5761196d611925565b5b60208301925060018202360383131561198a5761198961192a565b5b509250929050565b600061199e83856114ba565b93506119ab838584611006565b6119b483610f3a565b840190509392505050565b600060208201905081810360008301526119da818486611992565b90509392505050565b6000602082840312156119f9576119f8610eeb565b5b6000611a0784828501611135565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611a3c57611a3b611a1a565b5b83810192508235915060208301925067ffffffffffffffff821115611a6457611a63611a10565b5b600182023603831315611a7a57611a79611a15565b5b509250929050565b600082825260208201905092915050565b6000611a9f8385611a82565b9350611aac838584611006565b611ab583610f3a565b840190509392505050565b60008083356001602003843603038112611add57611adc611a1a565b5b83810192508235915060208301925067ffffffffffffffff821115611b0557611b04611a10565b5b604082023603831315611b1b57611b1a611a15565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b6000611b4d60208401846110ff565b905092915050565b6000611b646020840184611135565b905092915050565b611b7581611114565b82525050565b60408201611b8c6000830183611b3e565b611b99600085018261174d565b50611ba76020830183611b55565b611bb46020850182611b6c565b50505050565b6000611bc68383611b7b565b60408301905092915050565b600082905092915050565b6000604082019050919050565b6000611bf68385611b23565b9350611c0182611b34565b8060005b85811015611c3a57611c178284611bd2565b611c218882611bba565b9750611c2c83611bdd565b925050600181019050611c05565b5085925050509392505050565b600060a08301611c5a6000840184611a1f565b8583036000870152611c6d838284611a93565b92505050611c7e6020840184611a1f565b8583036020870152611c91838284611a93565b92505050611ca26040840184611ac0565b8583036040870152611cb5838284611bea565b92505050611cc66060840184611b3e565b611cd3606086018261174d565b50611ce16080840184611a1f565b8583036080870152611cf4838284611a93565b925050508091505092915050565b60006020820190508181036000830152611d1c8184611c47565b905092915050565b60008083356001602003843603038112611d4157611d40611920565b5b80840192508235915067ffffffffffffffff821115611d6357611d62611925565b5b602083019250604082023603831315611d7f57611d7e61192a565b5b509250929050565b600060408284031215611d9d57611d9c610eeb565b5b6000611dab8482850161114a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611df957611df8610eeb565b5b6000611e07848285016110ff565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e4a82611114565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e7c57611e7b611e10565b5b600182019050919050565b611e9081611642565b82525050565b611e9f81610ef5565b82525050565b6000611eb0826114af565b611eba8185611a82565b9350611eca8185602086016114cb565b611ed381610f3a565b840191505092915050565b600081519050919050565b6000819050602082019050919050565b604082016000820151611f0f600085018261174d565b506020820151611f226020850182611b6c565b50505050565b6000611f348383611ef9565b60408301905092915050565b6000602082019050919050565b6000611f5882611ede565b611f628185611b23565b9350611f6d83611ee9565b8060005b83811015611f9e578151611f858882611f28565b9750611f9083611f40565b925050600181019050611f71565b5085935050505092915050565b600060a083016000830151611fc36000860182611e87565b506020830151611fd66020860182611e96565b5060408301518482036040860152611fee8282611ea5565b915050606083015184820360608601526120088282611ea5565b915050608083015184820360808601526120228282611f4d565b9150508091505092915050565b600060208201905081810360008301526120498184611fab565b905092915050565b6000608082019050612066600083018761164c565b61207360208301866116cd565b61208060408301856116a3565b61208d606083018461164c565b95945050505050565b600082905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600082821b905092915050565b60006120e68383612096565b826120f181356120a1565b925060048210156121315761212c7fffffffff00000000000000000000000000000000000000000000000000000000836004036008026120cd565b831692505b505092915050565b600080fd5b600080fd5b6000808585111561215757612156612139565b5b838611156121685761216761213e565b5b6001850283019150848603905094509492505050565b60006020828403121561219457612193610f35565b5b61219e6020610fab565b905060006121ae84828501611135565b60008301525092915050565b6000602082840312156121d0576121cf610eeb565b5b60006121de8482850161217e565b91505092915050565b60006060820190506121fc60008301866116a3565b61220960208301856116a3565b6122166040830184611389565b949350505050565b612227816120a1565b82525050565b6000602082019050612242600083018461221e565b92915050565b61225181611494565b811461225c57600080fd5b50565b60008151905061226e81612248565b92915050565b60006020828403121561228a57612289610eeb565b5b60006122988482850161225f565b91505092915050565b600082825260208201905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061230e602a836122a1565b9150612319826122b2565b604082019050919050565b6000602082019050818103600083015261233d81612301565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006123a06026836122a1565b91506123ab82612344565b604082019050919050565b600060208201905081810360008301526123cf81612393565b9050919050565b600081905092915050565b60006123ec826114af565b6123f681856123d6565b93506124068185602086016114cb565b80840191505092915050565b600061241e82846123e1565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061245f601d836122a1565b915061246a82612429565b602082019050919050565b6000602082019050818103600083015261248e81612452565b9050919050565b600081519050919050565b60006124ab82612495565b6124b581856122a1565b93506124c58185602086016114cb565b6124ce81610f3a565b840191505092915050565b600060208201905081810360008301526124f381846124a0565b90509291505056fea264697066735822122019429211bebd27965a14cba6fdb6e6a63e4eae2c82a9e479505bf7e7d7cb36d664736f6c63430008130033";

type MockCCIPRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockCCIPRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCCIPRouter__factory extends ContractFactory {
  constructor(...args: MockCCIPRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockCCIPRouter> {
    return super.deploy(overrides || {}) as Promise<MockCCIPRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockCCIPRouter {
    return super.attach(address) as MockCCIPRouter;
  }
  override connect(signer: Signer): MockCCIPRouter__factory {
    return super.connect(signer) as MockCCIPRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCCIPRouterInterface {
    return new utils.Interface(_abi) as MockCCIPRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockCCIPRouter {
    return new Contract(address, _abi, signerOrProvider) as MockCCIPRouter;
  }
}
